// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/model/schedule/schedule.proto

package schedule // import "github.com/rhino1998/programme/backend/lib/model/schedule"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import routes "github.com/rhino1998/programme/backend/lib/model/routes"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskType int32

const (
	Unknown   TaskType = 0
	Floating  TaskType = 1
	Scheduled TaskType = 2
	Calendar  TaskType = 3
	Free      TaskType = 4
	Travel    TaskType = 5
)

var TaskType_name = map[int32]string{
	0: "Unknown",
	1: "Floating",
	2: "Scheduled",
	3: "Calendar",
	4: "Free",
	5: "Travel",
}
var TaskType_value = map[string]int32{
	"Unknown":   0,
	"Floating":  1,
	"Scheduled": 2,
	"Calendar":  3,
	"Free":      4,
	"Travel":    5,
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_schedule_34a1f4accefcaae0, []int{0}
}

type Day struct {
	Datetime int64   `protobuf:"varint,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Tasks    []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	// Types that are valid to be assigned to Weather:
	//	*Day_WeatherNull
	Weather isDay_Weather `protobuf_oneof:"weather"`
	// Types that are valid to be assigned to Traffic:
	//	*Day_TrafficNull
	Traffic isDay_Traffic `protobuf_oneof:"traffic"`
}

func (m *Day) Reset()      { *m = Day{} }
func (*Day) ProtoMessage() {}
func (*Day) Descriptor() ([]byte, []int) {
	return fileDescriptor_schedule_34a1f4accefcaae0, []int{0}
}
func (m *Day) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Day) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Day.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Day) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Day.Merge(dst, src)
}
func (m *Day) XXX_Size() int {
	return m.Size()
}
func (m *Day) XXX_DiscardUnknown() {
	xxx_messageInfo_Day.DiscardUnknown(m)
}

var xxx_messageInfo_Day proto.InternalMessageInfo

type isDay_Weather interface {
	isDay_Weather()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDay_Traffic interface {
	isDay_Traffic()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Day_WeatherNull struct {
	WeatherNull bool `protobuf:"varint,12,opt,name=weather_null,json=weatherNull,proto3,oneof"`
}
type Day_TrafficNull struct {
	TrafficNull bool `protobuf:"varint,14,opt,name=traffic_null,json=trafficNull,proto3,oneof"`
}

func (*Day_WeatherNull) isDay_Weather() {}
func (*Day_TrafficNull) isDay_Traffic() {}

func (m *Day) GetWeather() isDay_Weather {
	if m != nil {
		return m.Weather
	}
	return nil
}
func (m *Day) GetTraffic() isDay_Traffic {
	if m != nil {
		return m.Traffic
	}
	return nil
}

func (m *Day) GetDatetime() int64 {
	if m != nil {
		return m.Datetime
	}
	return 0
}

func (m *Day) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *Day) GetWeatherNull() bool {
	if x, ok := m.GetWeather().(*Day_WeatherNull); ok {
		return x.WeatherNull
	}
	return false
}

func (m *Day) GetTrafficNull() bool {
	if x, ok := m.GetTraffic().(*Day_TrafficNull); ok {
		return x.TrafficNull
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Day) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Day_OneofMarshaler, _Day_OneofUnmarshaler, _Day_OneofSizer, []interface{}{
		(*Day_WeatherNull)(nil),
		(*Day_TrafficNull)(nil),
	}
}

func _Day_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Day)
	// weather
	switch x := m.Weather.(type) {
	case *Day_WeatherNull:
		t := uint64(0)
		if x.WeatherNull {
			t = 1
		}
		_ = b.EncodeVarint(12<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Day.Weather has unexpected type %T", x)
	}
	// traffic
	switch x := m.Traffic.(type) {
	case *Day_TrafficNull:
		t := uint64(0)
		if x.TrafficNull {
			t = 1
		}
		_ = b.EncodeVarint(14<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Day.Traffic has unexpected type %T", x)
	}
	return nil
}

func _Day_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Day)
	switch tag {
	case 12: // weather.weather_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Weather = &Day_WeatherNull{x != 0}
		return true, err
	case 14: // traffic.traffic_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Traffic = &Day_TrafficNull{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Day_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Day)
	// weather
	switch x := m.Weather.(type) {
	case *Day_WeatherNull:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// traffic
	switch x := m.Traffic.(type) {
	case *Day_TrafficNull:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Task struct {
	TaskType    TaskType `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,enum=shared.model.schedule.TaskType" json:"task_type,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Duration    int64    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Stress      int64    `protobuf:"varint,5,opt,name=stress,proto3" json:"stress,omitempty"`
	// Coord location = 4;
	//
	// Types that are valid to be assigned to Deadline:
	//	*Task_DeadlineNull
	//	*Task_DeadlineValue
	Deadline isTask_Deadline `protobuf_oneof:"deadline"`
	// Types that are valid to be assigned to Start:
	//	*Task_StartNull
	//	*Task_StartValue
	Start isTask_Start `protobuf_oneof:"start"`
	// Types that are valid to be assigned to TravelMethod:
	//	*Task_TravelMethodNull
	//	*Task_TravelMethodValue
	TravelMethod isTask_TravelMethod `protobuf_oneof:"travel_method"`
	// Types that are valid to be assigned to Location:
	//	*Task_LocationNull
	//	*Task_LocationValue
	Location isTask_Location `protobuf_oneof:"location"`
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_schedule_34a1f4accefcaae0, []int{1}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

type isTask_Deadline interface {
	isTask_Deadline()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTask_Start interface {
	isTask_Start()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTask_TravelMethod interface {
	isTask_TravelMethod()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTask_Location interface {
	isTask_Location()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Task_DeadlineNull struct {
	DeadlineNull bool `protobuf:"varint,8,opt,name=deadline_null,json=deadlineNull,proto3,oneof"`
}
type Task_DeadlineValue struct {
	DeadlineValue int64 `protobuf:"varint,9,opt,name=deadline_value,json=deadlineValue,proto3,oneof"`
}
type Task_StartNull struct {
	StartNull bool `protobuf:"varint,10,opt,name=start_null,json=startNull,proto3,oneof"`
}
type Task_StartValue struct {
	StartValue int64 `protobuf:"varint,11,opt,name=start_value,json=startValue,proto3,oneof"`
}
type Task_TravelMethodNull struct {
	TravelMethodNull bool `protobuf:"varint,12,opt,name=travel_method_null,json=travelMethodNull,proto3,oneof"`
}
type Task_TravelMethodValue struct {
	TravelMethodValue routes.TravelMethod `protobuf:"varint,13,opt,name=travel_method_value,json=travelMethodValue,proto3,enum=shared.model.routes.TravelMethod,oneof"`
}
type Task_LocationNull struct {
	LocationNull bool `protobuf:"varint,14,opt,name=location_null,json=locationNull,proto3,oneof"`
}
type Task_LocationValue struct {
	LocationValue *routes.Location `protobuf:"bytes,15,opt,name=location_value,json=locationValue,oneof"`
}

func (*Task_DeadlineNull) isTask_Deadline()          {}
func (*Task_DeadlineValue) isTask_Deadline()         {}
func (*Task_StartNull) isTask_Start()                {}
func (*Task_StartValue) isTask_Start()               {}
func (*Task_TravelMethodNull) isTask_TravelMethod()  {}
func (*Task_TravelMethodValue) isTask_TravelMethod() {}
func (*Task_LocationNull) isTask_Location()          {}
func (*Task_LocationValue) isTask_Location()         {}

func (m *Task) GetDeadline() isTask_Deadline {
	if m != nil {
		return m.Deadline
	}
	return nil
}
func (m *Task) GetStart() isTask_Start {
	if m != nil {
		return m.Start
	}
	return nil
}
func (m *Task) GetTravelMethod() isTask_TravelMethod {
	if m != nil {
		return m.TravelMethod
	}
	return nil
}
func (m *Task) GetLocation() isTask_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Task) GetTaskType() TaskType {
	if m != nil {
		return m.TaskType
	}
	return Unknown
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Task) GetStress() int64 {
	if m != nil {
		return m.Stress
	}
	return 0
}

func (m *Task) GetDeadlineNull() bool {
	if x, ok := m.GetDeadline().(*Task_DeadlineNull); ok {
		return x.DeadlineNull
	}
	return false
}

func (m *Task) GetDeadlineValue() int64 {
	if x, ok := m.GetDeadline().(*Task_DeadlineValue); ok {
		return x.DeadlineValue
	}
	return 0
}

func (m *Task) GetStartNull() bool {
	if x, ok := m.GetStart().(*Task_StartNull); ok {
		return x.StartNull
	}
	return false
}

func (m *Task) GetStartValue() int64 {
	if x, ok := m.GetStart().(*Task_StartValue); ok {
		return x.StartValue
	}
	return 0
}

func (m *Task) GetTravelMethodNull() bool {
	if x, ok := m.GetTravelMethod().(*Task_TravelMethodNull); ok {
		return x.TravelMethodNull
	}
	return false
}

func (m *Task) GetTravelMethodValue() routes.TravelMethod {
	if x, ok := m.GetTravelMethod().(*Task_TravelMethodValue); ok {
		return x.TravelMethodValue
	}
	return routes.Unknown
}

func (m *Task) GetLocationNull() bool {
	if x, ok := m.GetLocation().(*Task_LocationNull); ok {
		return x.LocationNull
	}
	return false
}

func (m *Task) GetLocationValue() *routes.Location {
	if x, ok := m.GetLocation().(*Task_LocationValue); ok {
		return x.LocationValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Task) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Task_OneofMarshaler, _Task_OneofUnmarshaler, _Task_OneofSizer, []interface{}{
		(*Task_DeadlineNull)(nil),
		(*Task_DeadlineValue)(nil),
		(*Task_StartNull)(nil),
		(*Task_StartValue)(nil),
		(*Task_TravelMethodNull)(nil),
		(*Task_TravelMethodValue)(nil),
		(*Task_LocationNull)(nil),
		(*Task_LocationValue)(nil),
	}
}

func _Task_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Task)
	// deadline
	switch x := m.Deadline.(type) {
	case *Task_DeadlineNull:
		t := uint64(0)
		if x.DeadlineNull {
			t = 1
		}
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Task_DeadlineValue:
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.DeadlineValue))
	case nil:
	default:
		return fmt.Errorf("Task.Deadline has unexpected type %T", x)
	}
	// start
	switch x := m.Start.(type) {
	case *Task_StartNull:
		t := uint64(0)
		if x.StartNull {
			t = 1
		}
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Task_StartValue:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.StartValue))
	case nil:
	default:
		return fmt.Errorf("Task.Start has unexpected type %T", x)
	}
	// travel_method
	switch x := m.TravelMethod.(type) {
	case *Task_TravelMethodNull:
		t := uint64(0)
		if x.TravelMethodNull {
			t = 1
		}
		_ = b.EncodeVarint(12<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Task_TravelMethodValue:
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TravelMethodValue))
	case nil:
	default:
		return fmt.Errorf("Task.TravelMethod has unexpected type %T", x)
	}
	// location
	switch x := m.Location.(type) {
	case *Task_LocationNull:
		t := uint64(0)
		if x.LocationNull {
			t = 1
		}
		_ = b.EncodeVarint(14<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Task_LocationValue:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocationValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Task.Location has unexpected type %T", x)
	}
	return nil
}

func _Task_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Task)
	switch tag {
	case 8: // deadline.deadline_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Deadline = &Task_DeadlineNull{x != 0}
		return true, err
	case 9: // deadline.deadline_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Deadline = &Task_DeadlineValue{int64(x)}
		return true, err
	case 10: // start.start_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Start = &Task_StartNull{x != 0}
		return true, err
	case 11: // start.start_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Start = &Task_StartValue{int64(x)}
		return true, err
	case 12: // travel_method.travel_method_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TravelMethod = &Task_TravelMethodNull{x != 0}
		return true, err
	case 13: // travel_method.travel_method_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TravelMethod = &Task_TravelMethodValue{routes.TravelMethod(x)}
		return true, err
	case 14: // location.location_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Location = &Task_LocationNull{x != 0}
		return true, err
	case 15: // location.location_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(routes.Location)
		err := b.DecodeMessage(msg)
		m.Location = &Task_LocationValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Task_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Task)
	// deadline
	switch x := m.Deadline.(type) {
	case *Task_DeadlineNull:
		n += 1 // tag and wire
		n += 1
	case *Task_DeadlineValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.DeadlineValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// start
	switch x := m.Start.(type) {
	case *Task_StartNull:
		n += 1 // tag and wire
		n += 1
	case *Task_StartValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.StartValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// travel_method
	switch x := m.TravelMethod.(type) {
	case *Task_TravelMethodNull:
		n += 1 // tag and wire
		n += 1
	case *Task_TravelMethodValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.TravelMethodValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// location
	switch x := m.Location.(type) {
	case *Task_LocationNull:
		n += 1 // tag and wire
		n += 1
	case *Task_LocationValue:
		s := proto.Size(x.LocationValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NewTaskRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Task *Task  `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
}

func (m *NewTaskRequest) Reset()      { *m = NewTaskRequest{} }
func (*NewTaskRequest) ProtoMessage() {}
func (*NewTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_schedule_34a1f4accefcaae0, []int{2}
}
func (m *NewTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NewTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTaskRequest.Merge(dst, src)
}
func (m *NewTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewTaskRequest proto.InternalMessageInfo

func (m *NewTaskRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *NewTaskRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type Boolean struct {
	Boolean bool `protobuf:"varint,1,opt,name=boolean,proto3" json:"boolean,omitempty"`
}

func (m *Boolean) Reset()      { *m = Boolean{} }
func (*Boolean) ProtoMessage() {}
func (*Boolean) Descriptor() ([]byte, []int) {
	return fileDescriptor_schedule_34a1f4accefcaae0, []int{3}
}
func (m *Boolean) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Boolean) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Boolean.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Boolean) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Boolean.Merge(dst, src)
}
func (m *Boolean) XXX_Size() int {
	return m.Size()
}
func (m *Boolean) XXX_DiscardUnknown() {
	xxx_messageInfo_Boolean.DiscardUnknown(m)
}

var xxx_messageInfo_Boolean proto.InternalMessageInfo

func (m *Boolean) GetBoolean() bool {
	if m != nil {
		return m.Boolean
	}
	return false
}

func init() {
	proto.RegisterType((*Day)(nil), "shared.model.schedule.Day")
	proto.RegisterType((*Task)(nil), "shared.model.schedule.Task")
	proto.RegisterType((*NewTaskRequest)(nil), "shared.model.schedule.NewTaskRequest")
	proto.RegisterType((*Boolean)(nil), "shared.model.schedule.Boolean")
	proto.RegisterEnum("shared.model.schedule.TaskType", TaskType_name, TaskType_value)
}
func (x TaskType) String() string {
	s, ok := TaskType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Day) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Day)
	if !ok {
		that2, ok := that.(Day)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Datetime != that1.Datetime {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if that1.Weather == nil {
		if this.Weather != nil {
			return false
		}
	} else if this.Weather == nil {
		return false
	} else if !this.Weather.Equal(that1.Weather) {
		return false
	}
	if that1.Traffic == nil {
		if this.Traffic != nil {
			return false
		}
	} else if this.Traffic == nil {
		return false
	} else if !this.Traffic.Equal(that1.Traffic) {
		return false
	}
	return true
}
func (this *Day_WeatherNull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Day_WeatherNull)
	if !ok {
		that2, ok := that.(Day_WeatherNull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WeatherNull != that1.WeatherNull {
		return false
	}
	return true
}
func (this *Day_TrafficNull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Day_TrafficNull)
	if !ok {
		that2, ok := that.(Day_TrafficNull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrafficNull != that1.TrafficNull {
		return false
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Stress != that1.Stress {
		return false
	}
	if that1.Deadline == nil {
		if this.Deadline != nil {
			return false
		}
	} else if this.Deadline == nil {
		return false
	} else if !this.Deadline.Equal(that1.Deadline) {
		return false
	}
	if that1.Start == nil {
		if this.Start != nil {
			return false
		}
	} else if this.Start == nil {
		return false
	} else if !this.Start.Equal(that1.Start) {
		return false
	}
	if that1.TravelMethod == nil {
		if this.TravelMethod != nil {
			return false
		}
	} else if this.TravelMethod == nil {
		return false
	} else if !this.TravelMethod.Equal(that1.TravelMethod) {
		return false
	}
	if that1.Location == nil {
		if this.Location != nil {
			return false
		}
	} else if this.Location == nil {
		return false
	} else if !this.Location.Equal(that1.Location) {
		return false
	}
	return true
}
func (this *Task_DeadlineNull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_DeadlineNull)
	if !ok {
		that2, ok := that.(Task_DeadlineNull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeadlineNull != that1.DeadlineNull {
		return false
	}
	return true
}
func (this *Task_DeadlineValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_DeadlineValue)
	if !ok {
		that2, ok := that.(Task_DeadlineValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeadlineValue != that1.DeadlineValue {
		return false
	}
	return true
}
func (this *Task_StartNull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_StartNull)
	if !ok {
		that2, ok := that.(Task_StartNull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartNull != that1.StartNull {
		return false
	}
	return true
}
func (this *Task_StartValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_StartValue)
	if !ok {
		that2, ok := that.(Task_StartValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartValue != that1.StartValue {
		return false
	}
	return true
}
func (this *Task_TravelMethodNull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_TravelMethodNull)
	if !ok {
		that2, ok := that.(Task_TravelMethodNull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TravelMethodNull != that1.TravelMethodNull {
		return false
	}
	return true
}
func (this *Task_TravelMethodValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_TravelMethodValue)
	if !ok {
		that2, ok := that.(Task_TravelMethodValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TravelMethodValue != that1.TravelMethodValue {
		return false
	}
	return true
}
func (this *Task_LocationNull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_LocationNull)
	if !ok {
		that2, ok := that.(Task_LocationNull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LocationNull != that1.LocationNull {
		return false
	}
	return true
}
func (this *Task_LocationValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_LocationValue)
	if !ok {
		that2, ok := that.(Task_LocationValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocationValue.Equal(that1.LocationValue) {
		return false
	}
	return true
}
func (this *NewTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewTaskRequest)
	if !ok {
		that2, ok := that.(NewTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *Boolean) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Boolean)
	if !ok {
		that2, ok := that.(Boolean)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Boolean != that1.Boolean {
		return false
	}
	return true
}
func (this *Day) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schedule.Day{")
	s = append(s, "Datetime: "+fmt.Sprintf("%#v", this.Datetime)+",\n")
	if this.Tasks != nil {
		s = append(s, "Tasks: "+fmt.Sprintf("%#v", this.Tasks)+",\n")
	}
	if this.Weather != nil {
		s = append(s, "Weather: "+fmt.Sprintf("%#v", this.Weather)+",\n")
	}
	if this.Traffic != nil {
		s = append(s, "Traffic: "+fmt.Sprintf("%#v", this.Traffic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Day_WeatherNull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Day_WeatherNull{` +
		`WeatherNull:` + fmt.Sprintf("%#v", this.WeatherNull) + `}`}, ", ")
	return s
}
func (this *Day_TrafficNull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Day_TrafficNull{` +
		`TrafficNull:` + fmt.Sprintf("%#v", this.TrafficNull) + `}`}, ", ")
	return s
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&schedule.Task{")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Stress: "+fmt.Sprintf("%#v", this.Stress)+",\n")
	if this.Deadline != nil {
		s = append(s, "Deadline: "+fmt.Sprintf("%#v", this.Deadline)+",\n")
	}
	if this.Start != nil {
		s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	}
	if this.TravelMethod != nil {
		s = append(s, "TravelMethod: "+fmt.Sprintf("%#v", this.TravelMethod)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task_DeadlineNull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_DeadlineNull{` +
		`DeadlineNull:` + fmt.Sprintf("%#v", this.DeadlineNull) + `}`}, ", ")
	return s
}
func (this *Task_DeadlineValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_DeadlineValue{` +
		`DeadlineValue:` + fmt.Sprintf("%#v", this.DeadlineValue) + `}`}, ", ")
	return s
}
func (this *Task_StartNull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_StartNull{` +
		`StartNull:` + fmt.Sprintf("%#v", this.StartNull) + `}`}, ", ")
	return s
}
func (this *Task_StartValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_StartValue{` +
		`StartValue:` + fmt.Sprintf("%#v", this.StartValue) + `}`}, ", ")
	return s
}
func (this *Task_TravelMethodNull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_TravelMethodNull{` +
		`TravelMethodNull:` + fmt.Sprintf("%#v", this.TravelMethodNull) + `}`}, ", ")
	return s
}
func (this *Task_TravelMethodValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_TravelMethodValue{` +
		`TravelMethodValue:` + fmt.Sprintf("%#v", this.TravelMethodValue) + `}`}, ", ")
	return s
}
func (this *Task_LocationNull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_LocationNull{` +
		`LocationNull:` + fmt.Sprintf("%#v", this.LocationNull) + `}`}, ", ")
	return s
}
func (this *Task_LocationValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schedule.Task_LocationValue{` +
		`LocationValue:` + fmt.Sprintf("%#v", this.LocationValue) + `}`}, ", ")
	return s
}
func (this *NewTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schedule.NewTaskRequest{")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	if this.Task != nil {
		s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Boolean) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schedule.Boolean{")
	s = append(s, "Boolean: "+fmt.Sprintf("%#v", this.Boolean)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchedule(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskManagerClient interface {
	AddTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*Boolean, error)
}

type taskManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagerClient(cc *grpc.ClientConn) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) AddTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/shared.model.schedule.TaskManager/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
type TaskManagerServer interface {
	AddTask(context.Context, *NewTaskRequest) (*Boolean, error)
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shared.model.schedule.TaskManager/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).AddTask(ctx, req.(*NewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shared.model.schedule.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskManager_AddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/model/schedule/schedule.proto",
}

func (m *Day) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Day) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Datetime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(m.Datetime))
	}
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSchedule(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Weather != nil {
		nn1, err := m.Weather.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.Traffic != nil {
		nn2, err := m.Traffic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Day_WeatherNull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x60
	i++
	if m.WeatherNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Day_TrafficNull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x70
	i++
	if m.TrafficNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(m.TaskType))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(m.Duration))
	}
	if m.Stress != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(m.Stress))
	}
	if m.Deadline != nil {
		nn3, err := m.Deadline.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.Start != nil {
		nn4, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.TravelMethod != nil {
		nn5, err := m.TravelMethod.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.Location != nil {
		nn6, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *Task_DeadlineNull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	if m.DeadlineNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Task_DeadlineValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	i = encodeVarintSchedule(dAtA, i, uint64(m.DeadlineValue))
	return i, nil
}
func (m *Task_StartNull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	if m.StartNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Task_StartValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintSchedule(dAtA, i, uint64(m.StartValue))
	return i, nil
}
func (m *Task_TravelMethodNull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x60
	i++
	if m.TravelMethodNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Task_TravelMethodValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x68
	i++
	i = encodeVarintSchedule(dAtA, i, uint64(m.TravelMethodValue))
	return i, nil
}
func (m *Task_LocationNull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x70
	i++
	if m.LocationNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Task_LocationValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LocationValue != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(m.LocationValue.Size()))
		n7, err := m.LocationValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *NewTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.Task != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchedule(dAtA, i, uint64(m.Task.Size()))
		n8, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *Boolean) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Boolean) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Boolean {
		dAtA[i] = 0x8
		i++
		if m.Boolean {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintSchedule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Day) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Datetime != 0 {
		n += 1 + sovSchedule(uint64(m.Datetime))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovSchedule(uint64(l))
		}
	}
	if m.Weather != nil {
		n += m.Weather.Size()
	}
	if m.Traffic != nil {
		n += m.Traffic.Size()
	}
	return n
}

func (m *Day_WeatherNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Day_TrafficNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskType != 0 {
		n += 1 + sovSchedule(uint64(m.TaskType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSchedule(uint64(m.Duration))
	}
	if m.Stress != 0 {
		n += 1 + sovSchedule(uint64(m.Stress))
	}
	if m.Deadline != nil {
		n += m.Deadline.Size()
	}
	if m.Start != nil {
		n += m.Start.Size()
	}
	if m.TravelMethod != nil {
		n += m.TravelMethod.Size()
	}
	if m.Location != nil {
		n += m.Location.Size()
	}
	return n
}

func (m *Task_DeadlineNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Task_DeadlineValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSchedule(uint64(m.DeadlineValue))
	return n
}
func (m *Task_StartNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Task_StartValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSchedule(uint64(m.StartValue))
	return n
}
func (m *Task_TravelMethodNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Task_TravelMethodValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSchedule(uint64(m.TravelMethodValue))
	return n
}
func (m *Task_LocationNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Task_LocationValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocationValue != nil {
		l = m.LocationValue.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}
func (m *NewTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovSchedule(uint64(l))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovSchedule(uint64(l))
	}
	return n
}

func (m *Boolean) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Boolean {
		n += 2
	}
	return n
}

func sovSchedule(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSchedule(x uint64) (n int) {
	return sovSchedule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Day) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Day{`,
		`Datetime:` + fmt.Sprintf("%v", this.Datetime) + `,`,
		`Tasks:` + strings.Replace(fmt.Sprintf("%v", this.Tasks), "Task", "Task", 1) + `,`,
		`Weather:` + fmt.Sprintf("%v", this.Weather) + `,`,
		`Traffic:` + fmt.Sprintf("%v", this.Traffic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Day_WeatherNull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Day_WeatherNull{`,
		`WeatherNull:` + fmt.Sprintf("%v", this.WeatherNull) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Day_TrafficNull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Day_TrafficNull{`,
		`TrafficNull:` + fmt.Sprintf("%v", this.TrafficNull) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task{`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Stress:` + fmt.Sprintf("%v", this.Stress) + `,`,
		`Deadline:` + fmt.Sprintf("%v", this.Deadline) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`TravelMethod:` + fmt.Sprintf("%v", this.TravelMethod) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_DeadlineNull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_DeadlineNull{`,
		`DeadlineNull:` + fmt.Sprintf("%v", this.DeadlineNull) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_DeadlineValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_DeadlineValue{`,
		`DeadlineValue:` + fmt.Sprintf("%v", this.DeadlineValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_StartNull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_StartNull{`,
		`StartNull:` + fmt.Sprintf("%v", this.StartNull) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_StartValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_StartValue{`,
		`StartValue:` + fmt.Sprintf("%v", this.StartValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_TravelMethodNull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_TravelMethodNull{`,
		`TravelMethodNull:` + fmt.Sprintf("%v", this.TravelMethodNull) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_TravelMethodValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_TravelMethodValue{`,
		`TravelMethodValue:` + fmt.Sprintf("%v", this.TravelMethodValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_LocationNull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_LocationNull{`,
		`LocationNull:` + fmt.Sprintf("%v", this.LocationNull) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task_LocationValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task_LocationValue{`,
		`LocationValue:` + strings.Replace(fmt.Sprintf("%v", this.LocationValue), "Location", "routes.Location", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewTaskRequest{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Boolean) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Boolean{`,
		`Boolean:` + fmt.Sprintf("%v", this.Boolean) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSchedule(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Day) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Day: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Day: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datetime", wireType)
			}
			m.Datetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Datetime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeatherNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Weather = &Day_WeatherNull{b}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Traffic = &Day_TrafficNull{b}
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= (TaskType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stress", wireType)
			}
			m.Stress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stress |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadlineNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Deadline = &Task_DeadlineNull{b}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadlineValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deadline = &Task_DeadlineValue{v}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Start = &Task_StartNull{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = &Task_StartValue{v}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelMethodNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TravelMethod = &Task_TravelMethodNull{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelMethodValue", wireType)
			}
			var v routes.TravelMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (routes.TravelMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TravelMethod = &Task_TravelMethodValue{v}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Location = &Task_LocationNull{b}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &routes.Location{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Location = &Task_LocationValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Boolean) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Boolean: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Boolean: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boolean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Boolean = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchedule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchedule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSchedule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSchedule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSchedule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSchedule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchedule   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("shared/model/schedule/schedule.proto", fileDescriptor_schedule_34a1f4accefcaae0)
}

var fileDescriptor_schedule_34a1f4accefcaae0 = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xf6, 0xe6, 0x4f, 0xe3, 0x8c, 0x93, 0x34, 0xbf, 0xfd, 0x09, 0x64, 0x15, 0xe1, 0xa6, 0x29,
	0x15, 0x11, 0x87, 0x44, 0x0d, 0x17, 0x2a, 0x71, 0x21, 0xa0, 0x2a, 0x07, 0x5a, 0x21, 0xb7, 0x45,
	0x88, 0x4b, 0xb4, 0x89, 0xa7, 0x89, 0x15, 0xc7, 0x0e, 0xeb, 0x75, 0xab, 0xde, 0x78, 0x04, 0x1e,
	0x83, 0x07, 0xe0, 0x21, 0x38, 0xf6, 0xd8, 0x23, 0x4d, 0x2f, 0x3d, 0xf6, 0x11, 0x90, 0x77, 0x37,
	0x51, 0x82, 0x5a, 0x38, 0x79, 0x76, 0xe6, 0x9b, 0x6f, 0x66, 0x3f, 0x7f, 0x36, 0x3c, 0x8b, 0x47,
	0x8c, 0xa3, 0xd7, 0x9a, 0x44, 0x1e, 0x06, 0xad, 0x78, 0x30, 0x42, 0x2f, 0x09, 0x70, 0x11, 0x34,
	0xa7, 0x3c, 0x12, 0x11, 0x7d, 0xa4, 0x50, 0x4d, 0x89, 0x6a, 0xce, 0x8b, 0x1b, 0xb5, 0x95, 0x66,
	0x1e, 0x25, 0x02, 0x63, 0xfd, 0x50, 0x8d, 0xf5, 0x1f, 0x04, 0xb2, 0xef, 0xd8, 0x05, 0xdd, 0x00,
	0xd3, 0x63, 0x02, 0x85, 0x3f, 0x41, 0x9b, 0xd4, 0x48, 0x23, 0xeb, 0x2e, 0xce, 0x74, 0x17, 0xf2,
	0x82, 0xc5, 0xe3, 0xd8, 0xce, 0xd4, 0xb2, 0x0d, 0xab, 0xfd, 0xa4, 0x79, 0xef, 0xb0, 0xe6, 0x31,
	0x8b, 0xc7, 0xae, 0x42, 0xd2, 0x6d, 0x28, 0x9d, 0x23, 0x13, 0x23, 0xe4, 0xbd, 0x30, 0x09, 0x02,
	0xbb, 0x54, 0x23, 0x0d, 0xb3, 0x6b, 0xb8, 0x96, 0xce, 0x1e, 0x26, 0x41, 0x90, 0x82, 0x04, 0x67,
	0xa7, 0xa7, 0xfe, 0x40, 0x81, 0x2a, 0x12, 0x44, 0x5c, 0x4b, 0x67, 0x53, 0x50, 0xa7, 0x08, 0x05,
	0xdd, 0x93, 0x86, 0xba, 0x52, 0xbf, 0xcd, 0x41, 0x2e, 0x9d, 0x47, 0x5f, 0x43, 0x31, 0x9d, 0xd8,
	0x13, 0x17, 0x53, 0xb5, 0x78, 0xa5, 0xbd, 0xf9, 0x97, 0xfd, 0x8e, 0x2f, 0xa6, 0xe8, 0x9a, 0x42,
	0x47, 0x94, 0x42, 0x2e, 0x64, 0x13, 0xb4, 0x33, 0x35, 0xd2, 0x28, 0xba, 0x32, 0xa6, 0x35, 0xb0,
	0x3c, 0x8c, 0x07, 0xdc, 0x9f, 0x0a, 0x3f, 0x0a, 0xed, 0xac, 0x2c, 0x2d, 0xa7, 0xa4, 0x56, 0x09,
	0x67, 0xb2, 0x9c, 0xd3, 0x5a, 0xe9, 0x33, 0x7d, 0x0c, 0x6b, 0xb1, 0xe0, 0x18, 0xc7, 0x76, 0x5e,
	0x56, 0xf4, 0x89, 0xee, 0x40, 0xd9, 0x43, 0xe6, 0x05, 0x7e, 0x88, 0xea, 0xb2, 0xa6, 0x56, 0xa4,
	0x34, 0x4f, 0x4b, 0x49, 0x9e, 0x43, 0x65, 0x01, 0x3b, 0x63, 0x41, 0x82, 0x76, 0x31, 0xa5, 0xe9,
	0x1a, 0xee, 0xa2, 0xfd, 0x63, 0x9a, 0xa6, 0x9b, 0x00, 0xb1, 0x60, 0x5c, 0x28, 0x32, 0xd0, 0xca,
	0x15, 0x65, 0x4e, 0x32, 0x6d, 0x81, 0xa5, 0x00, 0x8a, 0xc6, 0x92, 0x34, 0xc4, 0x55, 0x5d, 0x8a,
	0xa3, 0x09, 0x54, 0x70, 0x76, 0x86, 0x41, 0x6f, 0x82, 0x62, 0x14, 0x79, 0xcb, 0xaf, 0x2a, 0xe3,
	0x56, 0x55, 0xed, 0x40, 0x96, 0x24, 0xe5, 0x11, 0xfc, 0xbf, 0x8a, 0x57, 0xd4, 0x65, 0xa9, 0xfa,
	0xd6, 0xaa, 0xea, 0xda, 0x64, 0xc7, 0x4b, 0x1c, 0xdd, 0x8c, 0xfb, 0xdf, 0x32, 0xa7, 0x5a, 0x62,
	0x07, 0xca, 0x41, 0x34, 0x90, 0xe2, 0x2d, 0xbb, 0x20, 0xeb, 0x96, 0xe6, 0x69, 0x39, 0x7b, 0x1f,
	0x2a, 0x0b, 0x98, 0x1a, 0xbb, 0x5e, 0x23, 0x0d, 0xab, 0xfd, 0xf4, 0xde, 0xb1, 0xef, 0x35, 0xb4,
	0x9b, 0x75, 0x17, 0xec, 0x72, 0x5c, 0x07, 0xc0, 0x9c, 0x0b, 0xd9, 0x29, 0x40, 0x5e, 0xaa, 0xd1,
	0x59, 0x87, 0xf2, 0xca, 0xc5, 0x52, 0xd4, 0xbc, 0xad, 0x7e, 0x02, 0x95, 0x43, 0x3c, 0x97, 0xe6,
	0xc6, 0x2f, 0x09, 0xc6, 0x22, 0x75, 0x4d, 0x12, 0x23, 0x97, 0x76, 0x2b, 0xba, 0x32, 0xa6, 0x2d,
	0xc8, 0xa5, 0xae, 0x92, 0x4e, 0xfa, 0xc7, 0x27, 0x22, 0x81, 0xf5, 0x6d, 0x28, 0x74, 0xa2, 0x28,
	0x40, 0x16, 0x52, 0x1b, 0x0a, 0x7d, 0x15, 0x4a, 0x4a, 0xd3, 0x9d, 0x1f, 0x5f, 0x7c, 0x02, 0x73,
	0xee, 0x5a, 0x6a, 0x41, 0xe1, 0x24, 0x1c, 0x87, 0xd1, 0x79, 0x58, 0x35, 0x68, 0x09, 0xcc, 0xfd,
	0x20, 0x62, 0xc2, 0x0f, 0x87, 0x55, 0x42, 0xcb, 0x50, 0x3c, 0xd2, 0x23, 0xbc, 0x6a, 0x26, 0x2d,
	0xbe, 0x65, 0x01, 0x86, 0x1e, 0xe3, 0xd5, 0x2c, 0x35, 0x21, 0xb7, 0xcf, 0x11, 0xab, 0x39, 0x0a,
	0xb0, 0xa6, 0xde, 0x47, 0x35, 0xdf, 0xee, 0x81, 0x95, 0x32, 0x1f, 0xb0, 0x90, 0x0d, 0x91, 0xd3,
	0x0f, 0x50, 0x78, 0xe3, 0x79, 0xf2, 0x8b, 0xda, 0x79, 0x60, 0xf7, 0x55, 0x11, 0x36, 0x9c, 0x07,
	0x60, 0xfa, 0x52, 0x9d, 0xe8, 0xf2, 0xda, 0x31, 0xae, 0xae, 0x1d, 0xe3, 0xee, 0xda, 0x21, 0x5f,
	0x67, 0x0e, 0xf9, 0x3e, 0x73, 0xc8, 0xcf, 0x99, 0x43, 0x2e, 0x67, 0x0e, 0xf9, 0x35, 0x73, 0xc8,
	0xed, 0xcc, 0x31, 0xee, 0x66, 0x0e, 0xf9, 0x76, 0xe3, 0x18, 0x97, 0x37, 0x8e, 0x71, 0x75, 0xe3,
	0x18, 0x9f, 0xf7, 0x86, 0xbe, 0x18, 0x25, 0xfd, 0xe6, 0x20, 0x9a, 0xb4, 0xf8, 0xc8, 0x0f, 0xa3,
	0xdd, 0xbd, 0xbd, 0x57, 0xad, 0x29, 0x8f, 0x86, 0x9c, 0x4d, 0x26, 0xd8, 0xea, 0xb3, 0xc1, 0x18,
	0x43, 0xaf, 0x15, 0xf8, 0xfd, 0x3f, 0xfe, 0x88, 0xfd, 0x35, 0xf9, 0x43, 0x7b, 0xf9, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xa7, 0x1e, 0x94, 0x3f, 0x31, 0x05, 0x00, 0x00,
}
