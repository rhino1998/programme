// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/model/mobile/mobile.proto

package mobile // import "github.com/rhino1998/programme/backend/lib/model/mobile"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import routes "github.com/rhino1998/programme/backend/lib/model/routes"
import schedule "github.com/rhino1998/programme/backend/lib/model/schedule"
import weather "github.com/rhino1998/programme/backend/lib/model/weather"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MobileGatewayClient is the client API for MobileGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MobileGatewayClient interface {
	AddTask(ctx context.Context, in *schedule.NewTaskRequest, opts ...grpc.CallOption) (*schedule.Boolean, error)
	GetForecast(ctx context.Context, in *routes.Coords, opts ...grpc.CallOption) (*weather.Forecast, error)
}

type mobileGatewayClient struct {
	cc *grpc.ClientConn
}

func NewMobileGatewayClient(cc *grpc.ClientConn) MobileGatewayClient {
	return &mobileGatewayClient{cc}
}

func (c *mobileGatewayClient) AddTask(ctx context.Context, in *schedule.NewTaskRequest, opts ...grpc.CallOption) (*schedule.Boolean, error) {
	out := new(schedule.Boolean)
	err := c.cc.Invoke(ctx, "/shared.model.mobile.MobileGateway/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileGatewayClient) GetForecast(ctx context.Context, in *routes.Coords, opts ...grpc.CallOption) (*weather.Forecast, error) {
	out := new(weather.Forecast)
	err := c.cc.Invoke(ctx, "/shared.model.mobile.MobileGateway/GetForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobileGatewayServer is the server API for MobileGateway service.
type MobileGatewayServer interface {
	AddTask(context.Context, *schedule.NewTaskRequest) (*schedule.Boolean, error)
	GetForecast(context.Context, *routes.Coords) (*weather.Forecast, error)
}

func RegisterMobileGatewayServer(s *grpc.Server, srv MobileGatewayServer) {
	s.RegisterService(&_MobileGateway_serviceDesc, srv)
}

func _MobileGateway_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schedule.NewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileGatewayServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shared.model.mobile.MobileGateway/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileGatewayServer).AddTask(ctx, req.(*schedule.NewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileGateway_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(routes.Coords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileGatewayServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shared.model.mobile.MobileGateway/GetForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileGatewayServer).GetForecast(ctx, req.(*routes.Coords))
	}
	return interceptor(ctx, in, info, handler)
}

var _MobileGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shared.model.mobile.MobileGateway",
	HandlerType: (*MobileGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _MobileGateway_AddTask_Handler,
		},
		{
			MethodName: "GetForecast",
			Handler:    _MobileGateway_GetForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/model/mobile/mobile.proto",
}

func init() {
	proto.RegisterFile("shared/model/mobile/mobile.proto", fileDescriptor_mobile_ff3940c9f90ee65b)
}

var fileDescriptor_mobile_ff3940c9f90ee65b = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x93, 0x45, 0xe1, 0xc4, 0xe5, 0xdc, 0x2a, 0xbc, 0x88, 0xe8, 0x7a, 0x41, 0x1d, 0xb4,
	0xa3, 0x15, 0x2c, 0x08, 0x8a, 0x88, 0x93, 0x5b, 0xee, 0xf2, 0xd2, 0x3b, 0x7a, 0xe9, 0x5b, 0x93,
	0x1c, 0xc5, 0xcd, 0x8f, 0xe0, 0xc7, 0x70, 0xf1, 0x7b, 0x38, 0x76, 0xec, 0x68, 0xd3, 0xc5, 0xb1,
	0x1f, 0x41, 0xbc, 0x3f, 0x85, 0x08, 0x4e, 0x4f, 0xe0, 0xfd, 0x3d, 0x6f, 0x7e, 0x24, 0xd1, 0x81,
	0xcd, 0xa5, 0x41, 0x25, 0x34, 0x29, 0x2c, 0x85, 0xa6, 0xb4, 0x28, 0xb1, 0x8d, 0x64, 0x6a, 0xc8,
	0x51, 0xbc, 0xd7, 0x10, 0x49, 0x4d, 0x24, 0xcd, 0xa8, 0x77, 0x14, 0xd4, 0x6c, 0x96, 0xa3, 0xaa,
	0x4a, 0xdc, 0x1c, 0x9a, 0x6a, 0x2f, 0x5c, 0x6e, 0xa8, 0x72, 0x68, 0xdb, 0x68, 0x89, 0xc3, 0x80,
	0x98, 0xa1, 0x74, 0x39, 0x9a, 0x2e, 0x1b, 0xe6, 0xf4, 0x83, 0x47, 0xbb, 0xb7, 0xf5, 0xb5, 0x43,
	0xe9, 0x70, 0x26, 0x5f, 0xe2, 0xfb, 0x68, 0xfb, 0x52, 0xa9, 0x47, 0x69, 0xc7, 0xf1, 0x71, 0x12,
	0xe8, 0x6d, 0x04, 0xee, 0x70, 0xf6, 0x3b, 0x7f, 0xc0, 0xe7, 0x0a, 0xad, 0xeb, 0xc1, 0x3f, 0xd8,
	0x80, 0xa8, 0x44, 0x39, 0x89, 0x6f, 0xa2, 0x9d, 0x21, 0xba, 0x6b, 0x32, 0x98, 0x49, 0xeb, 0xe2,
	0xfd, 0x10, 0x6f, 0x95, 0xaf, 0x88, 0x8c, 0xb2, 0x7f, 0x77, 0x75, 0xb2, 0x5d, 0x79, 0xa0, 0xe7,
	0x4b, 0x60, 0x8b, 0x25, 0xb0, 0xf5, 0x12, 0xf8, 0xab, 0x07, 0xfe, 0xee, 0x81, 0x7f, 0x7a, 0xe0,
	0x73, 0x0f, 0xfc, 0xcb, 0x03, 0xff, 0xf6, 0xc0, 0xd6, 0x1e, 0xf8, 0xdb, 0x0a, 0xd8, 0x7c, 0x05,
	0x6c, 0xb1, 0x02, 0xf6, 0x74, 0x3e, 0x2a, 0x5c, 0x5e, 0xa5, 0x49, 0x46, 0x5a, 0x98, 0xbc, 0x98,
	0xd0, 0x49, 0xbf, 0x7f, 0x21, 0xa6, 0x86, 0x46, 0x46, 0x6a, 0x8d, 0x22, 0x95, 0xd9, 0x18, 0x27,
	0x4a, 0x94, 0x45, 0x1a, 0x7c, 0x56, 0xba, 0x55, 0xbf, 0xd2, 0xd9, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x87, 0x7a, 0x64, 0x68, 0xca, 0x01, 0x00, 0x00,
}
