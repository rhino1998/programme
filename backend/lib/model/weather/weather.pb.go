// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/model/weather/weather.proto

package weather // import "github.com/rhino1998/programme/backend/lib/model/weather"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import routes "github.com/rhino1998/programme/backend/lib/model/routes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Sys struct {
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Sunrise uint64 `protobuf:"varint,2,opt,name=sunrise,proto3" json:"sunrise,omitempty"`
	Sunset  uint64 `protobuf:"varint,3,opt,name=sunset,proto3" json:"sunset,omitempty"`
}

func (m *Sys) Reset()      { *m = Sys{} }
func (*Sys) ProtoMessage() {}
func (*Sys) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{0}
}
func (m *Sys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Sys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sys.Merge(dst, src)
}
func (m *Sys) XXX_Size() int {
	return m.Size()
}
func (m *Sys) XXX_DiscardUnknown() {
	xxx_messageInfo_Sys.DiscardUnknown(m)
}

var xxx_messageInfo_Sys proto.InternalMessageInfo

func (m *Sys) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Sys) GetSunrise() uint64 {
	if m != nil {
		return m.Sunrise
	}
	return 0
}

func (m *Sys) GetSunset() uint64 {
	if m != nil {
		return m.Sunset
	}
	return 0
}

type Main struct {
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TempMin     float64 `protobuf:"fixed64,2,opt,name=temp_min,json=tempMin,proto3" json:"temp_min,omitempty"`
	TempMax     float64 `protobuf:"fixed64,3,opt,name=temp_max,json=tempMax,proto3" json:"temp_max,omitempty"`
	Pressure    float64 `protobuf:"fixed64,4,opt,name=pressure,proto3" json:"pressure,omitempty"`
	SeaLevel    float64 `protobuf:"fixed64,5,opt,name=sea_level,json=seaLevel,proto3" json:"sea_level,omitempty"`
	GroundLevel float64 `protobuf:"fixed64,6,opt,name=ground_level,json=groundLevel,proto3" json:"ground_level,omitempty"`
	Humidity    int64   `protobuf:"varint,7,opt,name=humidity,proto3" json:"humidity,omitempty"`
}

func (m *Main) Reset()      { *m = Main{} }
func (*Main) ProtoMessage() {}
func (*Main) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{1}
}
func (m *Main) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Main) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Main.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Main) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Main.Merge(dst, src)
}
func (m *Main) XXX_Size() int {
	return m.Size()
}
func (m *Main) XXX_DiscardUnknown() {
	xxx_messageInfo_Main.DiscardUnknown(m)
}

var xxx_messageInfo_Main proto.InternalMessageInfo

func (m *Main) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Main) GetTempMin() float64 {
	if m != nil {
		return m.TempMin
	}
	return 0
}

func (m *Main) GetTempMax() float64 {
	if m != nil {
		return m.TempMax
	}
	return 0
}

func (m *Main) GetPressure() float64 {
	if m != nil {
		return m.Pressure
	}
	return 0
}

func (m *Main) GetSeaLevel() float64 {
	if m != nil {
		return m.SeaLevel
	}
	return 0
}

func (m *Main) GetGroundLevel() float64 {
	if m != nil {
		return m.GroundLevel
	}
	return 0
}

func (m *Main) GetHumidity() int64 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

// Mainly use id from this, can
type Weather struct {
	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Main        string `protobuf:"bytes,2,opt,name=main,proto3" json:"main,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Weather) Reset()      { *m = Weather{} }
func (*Weather) ProtoMessage() {}
func (*Weather) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{2}
}
func (m *Weather) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Weather) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Weather.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Weather) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Weather.Merge(dst, src)
}
func (m *Weather) XXX_Size() int {
	return m.Size()
}
func (m *Weather) XXX_DiscardUnknown() {
	xxx_messageInfo_Weather.DiscardUnknown(m)
}

var xxx_messageInfo_Weather proto.InternalMessageInfo

func (m *Weather) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Weather) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *Weather) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Wind struct {
	Speed float64 `protobuf:"fixed64,1,opt,name=speed,proto3" json:"speed,omitempty"`
	Deg   float64 `protobuf:"fixed64,2,opt,name=deg,proto3" json:"deg,omitempty"`
}

func (m *Wind) Reset()      { *m = Wind{} }
func (*Wind) ProtoMessage() {}
func (*Wind) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{3}
}
func (m *Wind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Wind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wind.Merge(dst, src)
}
func (m *Wind) XXX_Size() int {
	return m.Size()
}
func (m *Wind) XXX_DiscardUnknown() {
	xxx_messageInfo_Wind.DiscardUnknown(m)
}

var xxx_messageInfo_Wind proto.InternalMessageInfo

func (m *Wind) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Wind) GetDeg() float64 {
	if m != nil {
		return m.Deg
	}
	return 0
}

type Rain struct {
	ThreeHours float64 `protobuf:"fixed64,1,opt,name=three_hours,json=threeHours,proto3" json:"three_hours,omitempty"`
}

func (m *Rain) Reset()      { *m = Rain{} }
func (*Rain) ProtoMessage() {}
func (*Rain) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{4}
}
func (m *Rain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Rain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rain.Merge(dst, src)
}
func (m *Rain) XXX_Size() int {
	return m.Size()
}
func (m *Rain) XXX_DiscardUnknown() {
	xxx_messageInfo_Rain.DiscardUnknown(m)
}

var xxx_messageInfo_Rain proto.InternalMessageInfo

func (m *Rain) GetThreeHours() float64 {
	if m != nil {
		return m.ThreeHours
	}
	return 0
}

type Snow struct {
	ThreeHours float64 `protobuf:"fixed64,1,opt,name=three_hours,json=threeHours,proto3" json:"three_hours,omitempty"`
}

func (m *Snow) Reset()      { *m = Snow{} }
func (*Snow) ProtoMessage() {}
func (*Snow) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{5}
}
func (m *Snow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Snow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snow.Merge(dst, src)
}
func (m *Snow) XXX_Size() int {
	return m.Size()
}
func (m *Snow) XXX_DiscardUnknown() {
	xxx_messageInfo_Snow.DiscardUnknown(m)
}

var xxx_messageInfo_Snow proto.InternalMessageInfo

func (m *Snow) GetThreeHours() float64 {
	if m != nil {
		return m.ThreeHours
	}
	return 0
}

type Clouds struct {
	All int64 `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *Clouds) Reset()      { *m = Clouds{} }
func (*Clouds) ProtoMessage() {}
func (*Clouds) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{6}
}
func (m *Clouds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clouds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clouds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Clouds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clouds.Merge(dst, src)
}
func (m *Clouds) XXX_Size() int {
	return m.Size()
}
func (m *Clouds) XXX_DiscardUnknown() {
	xxx_messageInfo_Clouds.DiscardUnknown(m)
}

var xxx_messageInfo_Clouds proto.InternalMessageInfo

func (m *Clouds) GetAll() int64 {
	if m != nil {
		return m.All
	}
	return 0
}

type List struct {
	Dt      int64      `protobuf:"varint,1,opt,name=dt,proto3" json:"dt,omitempty"`
	Main    *Main      `protobuf:"bytes,2,opt,name=main" json:"main,omitempty"`
	Weather []*Weather `protobuf:"bytes,3,rep,name=weather" json:"weather,omitempty"`
	Clouds  *Clouds    `protobuf:"bytes,4,opt,name=clouds" json:"clouds,omitempty"`
	Wind    *Wind      `protobuf:"bytes,5,opt,name=wind" json:"wind,omitempty"`
	Rain    *Rain      `protobuf:"bytes,6,opt,name=rain" json:"rain,omitempty"`
	Sys     *Sys       `protobuf:"bytes,7,opt,name=sys" json:"sys,omitempty"`
}

func (m *List) Reset()      { *m = List{} }
func (*List) ProtoMessage() {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{7}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(dst, src)
}
func (m *List) XXX_Size() int {
	return m.Size()
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetDt() int64 {
	if m != nil {
		return m.Dt
	}
	return 0
}

func (m *List) GetMain() *Main {
	if m != nil {
		return m.Main
	}
	return nil
}

func (m *List) GetWeather() []*Weather {
	if m != nil {
		return m.Weather
	}
	return nil
}

func (m *List) GetClouds() *Clouds {
	if m != nil {
		return m.Clouds
	}
	return nil
}

func (m *List) GetWind() *Wind {
	if m != nil {
		return m.Wind
	}
	return nil
}

func (m *List) GetRain() *Rain {
	if m != nil {
		return m.Rain
	}
	return nil
}

func (m *List) GetSys() *Sys {
	if m != nil {
		return m.Sys
	}
	return nil
}

type City struct {
	Id      int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coords  *routes.Coords `protobuf:"bytes,3,opt,name=coords" json:"coords,omitempty"`
	Country string         `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *City) Reset()      { *m = City{} }
func (*City) ProtoMessage() {}
func (*City) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{8}
}
func (m *City) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *City) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_City.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *City) XXX_Merge(src proto.Message) {
	xxx_messageInfo_City.Merge(dst, src)
}
func (m *City) XXX_Size() int {
	return m.Size()
}
func (m *City) XXX_DiscardUnknown() {
	xxx_messageInfo_City.DiscardUnknown(m)
}

var xxx_messageInfo_City proto.InternalMessageInfo

func (m *City) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *City) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *City) GetCoords() *routes.Coords {
	if m != nil {
		return m.Coords
	}
	return nil
}

func (m *City) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type Forecast struct {
	List []*List `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	City *City   `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
}

func (m *Forecast) Reset()      { *m = Forecast{} }
func (*Forecast) ProtoMessage() {}
func (*Forecast) Descriptor() ([]byte, []int) {
	return fileDescriptor_weather_d6e6e4713136b519, []int{9}
}
func (m *Forecast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Forecast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecast.Merge(dst, src)
}
func (m *Forecast) XXX_Size() int {
	return m.Size()
}
func (m *Forecast) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecast.DiscardUnknown(m)
}

var xxx_messageInfo_Forecast proto.InternalMessageInfo

func (m *Forecast) GetList() []*List {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *Forecast) GetCity() *City {
	if m != nil {
		return m.City
	}
	return nil
}

func init() {
	proto.RegisterType((*Sys)(nil), "shared.model.weather.Sys")
	proto.RegisterType((*Main)(nil), "shared.model.weather.Main")
	proto.RegisterType((*Weather)(nil), "shared.model.weather.Weather")
	proto.RegisterType((*Wind)(nil), "shared.model.weather.Wind")
	proto.RegisterType((*Rain)(nil), "shared.model.weather.Rain")
	proto.RegisterType((*Snow)(nil), "shared.model.weather.Snow")
	proto.RegisterType((*Clouds)(nil), "shared.model.weather.Clouds")
	proto.RegisterType((*List)(nil), "shared.model.weather.List")
	proto.RegisterType((*City)(nil), "shared.model.weather.City")
	proto.RegisterType((*Forecast)(nil), "shared.model.weather.Forecast")
}
func (this *Sys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sys)
	if !ok {
		that2, ok := that.(Sys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Sunrise != that1.Sunrise {
		return false
	}
	if this.Sunset != that1.Sunset {
		return false
	}
	return true
}
func (this *Main) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Main)
	if !ok {
		that2, ok := that.(Main)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Temperature != that1.Temperature {
		return false
	}
	if this.TempMin != that1.TempMin {
		return false
	}
	if this.TempMax != that1.TempMax {
		return false
	}
	if this.Pressure != that1.Pressure {
		return false
	}
	if this.SeaLevel != that1.SeaLevel {
		return false
	}
	if this.GroundLevel != that1.GroundLevel {
		return false
	}
	if this.Humidity != that1.Humidity {
		return false
	}
	return true
}
func (this *Weather) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Weather)
	if !ok {
		that2, ok := that.(Weather)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Main != that1.Main {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Wind) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Wind)
	if !ok {
		that2, ok := that.(Wind)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.Deg != that1.Deg {
		return false
	}
	return true
}
func (this *Rain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rain)
	if !ok {
		that2, ok := that.(Rain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ThreeHours != that1.ThreeHours {
		return false
	}
	return true
}
func (this *Snow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Snow)
	if !ok {
		that2, ok := that.(Snow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ThreeHours != that1.ThreeHours {
		return false
	}
	return true
}
func (this *Clouds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clouds)
	if !ok {
		that2, ok := that.(Clouds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.All != that1.All {
		return false
	}
	return true
}
func (this *List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*List)
	if !ok {
		that2, ok := that.(List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dt != that1.Dt {
		return false
	}
	if !this.Main.Equal(that1.Main) {
		return false
	}
	if len(this.Weather) != len(that1.Weather) {
		return false
	}
	for i := range this.Weather {
		if !this.Weather[i].Equal(that1.Weather[i]) {
			return false
		}
	}
	if !this.Clouds.Equal(that1.Clouds) {
		return false
	}
	if !this.Wind.Equal(that1.Wind) {
		return false
	}
	if !this.Rain.Equal(that1.Rain) {
		return false
	}
	if !this.Sys.Equal(that1.Sys) {
		return false
	}
	return true
}
func (this *City) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*City)
	if !ok {
		that2, ok := that.(City)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Coords.Equal(that1.Coords) {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *Forecast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Forecast)
	if !ok {
		that2, ok := that.(Forecast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if !this.City.Equal(that1.City) {
		return false
	}
	return true
}
func (this *Sys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&weather.Sys{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Sunrise: "+fmt.Sprintf("%#v", this.Sunrise)+",\n")
	s = append(s, "Sunset: "+fmt.Sprintf("%#v", this.Sunset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Main) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&weather.Main{")
	s = append(s, "Temperature: "+fmt.Sprintf("%#v", this.Temperature)+",\n")
	s = append(s, "TempMin: "+fmt.Sprintf("%#v", this.TempMin)+",\n")
	s = append(s, "TempMax: "+fmt.Sprintf("%#v", this.TempMax)+",\n")
	s = append(s, "Pressure: "+fmt.Sprintf("%#v", this.Pressure)+",\n")
	s = append(s, "SeaLevel: "+fmt.Sprintf("%#v", this.SeaLevel)+",\n")
	s = append(s, "GroundLevel: "+fmt.Sprintf("%#v", this.GroundLevel)+",\n")
	s = append(s, "Humidity: "+fmt.Sprintf("%#v", this.Humidity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Weather) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&weather.Weather{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Main: "+fmt.Sprintf("%#v", this.Main)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Wind) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&weather.Wind{")
	s = append(s, "Speed: "+fmt.Sprintf("%#v", this.Speed)+",\n")
	s = append(s, "Deg: "+fmt.Sprintf("%#v", this.Deg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&weather.Rain{")
	s = append(s, "ThreeHours: "+fmt.Sprintf("%#v", this.ThreeHours)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Snow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&weather.Snow{")
	s = append(s, "ThreeHours: "+fmt.Sprintf("%#v", this.ThreeHours)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Clouds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&weather.Clouds{")
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&weather.List{")
	s = append(s, "Dt: "+fmt.Sprintf("%#v", this.Dt)+",\n")
	if this.Main != nil {
		s = append(s, "Main: "+fmt.Sprintf("%#v", this.Main)+",\n")
	}
	if this.Weather != nil {
		s = append(s, "Weather: "+fmt.Sprintf("%#v", this.Weather)+",\n")
	}
	if this.Clouds != nil {
		s = append(s, "Clouds: "+fmt.Sprintf("%#v", this.Clouds)+",\n")
	}
	if this.Wind != nil {
		s = append(s, "Wind: "+fmt.Sprintf("%#v", this.Wind)+",\n")
	}
	if this.Rain != nil {
		s = append(s, "Rain: "+fmt.Sprintf("%#v", this.Rain)+",\n")
	}
	if this.Sys != nil {
		s = append(s, "Sys: "+fmt.Sprintf("%#v", this.Sys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *City) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&weather.City{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Coords != nil {
		s = append(s, "Coords: "+fmt.Sprintf("%#v", this.Coords)+",\n")
	}
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Forecast) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&weather.Forecast{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	if this.City != nil {
		s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWeather(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeatherAPIClient is the client API for WeatherAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeatherAPIClient interface {
	GetForecast(ctx context.Context, in *routes.Coords, opts ...grpc.CallOption) (*Forecast, error)
}

type weatherAPIClient struct {
	cc *grpc.ClientConn
}

func NewWeatherAPIClient(cc *grpc.ClientConn) WeatherAPIClient {
	return &weatherAPIClient{cc}
}

func (c *weatherAPIClient) GetForecast(ctx context.Context, in *routes.Coords, opts ...grpc.CallOption) (*Forecast, error) {
	out := new(Forecast)
	err := c.cc.Invoke(ctx, "/shared.model.weather.WeatherAPI/GetForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherAPIServer is the server API for WeatherAPI service.
type WeatherAPIServer interface {
	GetForecast(context.Context, *routes.Coords) (*Forecast, error)
}

func RegisterWeatherAPIServer(s *grpc.Server, srv WeatherAPIServer) {
	s.RegisterService(&_WeatherAPI_serviceDesc, srv)
}

func _WeatherAPI_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(routes.Coords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherAPIServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shared.model.weather.WeatherAPI/GetForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherAPIServer).GetForecast(ctx, req.(*routes.Coords))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeatherAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shared.model.weather.WeatherAPI",
	HandlerType: (*WeatherAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForecast",
			Handler:    _WeatherAPI_GetForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/model/weather/weather.proto",
}

func (m *Sys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeather(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.Sunrise != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Sunrise))
	}
	if m.Sunset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Sunset))
	}
	return i, nil
}

func (m *Main) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Main) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Temperature != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Temperature))))
		i += 8
	}
	if m.TempMin != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TempMin))))
		i += 8
	}
	if m.TempMax != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TempMax))))
		i += 8
	}
	if m.Pressure != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Pressure))))
		i += 8
	}
	if m.SeaLevel != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SeaLevel))))
		i += 8
	}
	if m.GroundLevel != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.GroundLevel))))
		i += 8
	}
	if m.Humidity != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Humidity))
	}
	return i, nil
}

func (m *Weather) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Weather) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Id))
	}
	if len(m.Main) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeather(dAtA, i, uint64(len(m.Main)))
		i += copy(dAtA[i:], m.Main)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeather(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *Wind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wind) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Speed != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i += 8
	}
	if m.Deg != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Deg))))
		i += 8
	}
	return i, nil
}

func (m *Rain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ThreeHours != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ThreeHours))))
		i += 8
	}
	return i, nil
}

func (m *Snow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ThreeHours != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ThreeHours))))
		i += 8
	}
	return i, nil
}

func (m *Clouds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clouds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.All != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.All))
	}
	return i, nil
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Dt))
	}
	if m.Main != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Main.Size()))
		n1, err := m.Main.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Weather) > 0 {
		for _, msg := range m.Weather {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWeather(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Clouds != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Clouds.Size()))
		n2, err := m.Clouds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Wind != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Wind.Size()))
		n3, err := m.Wind.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Rain != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Rain.Size()))
		n4, err := m.Rain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Sys != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Sys.Size()))
		n5, err := m.Sys.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *City) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *City) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeather(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Coords != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.Coords.Size()))
		n6, err := m.Coords.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeather(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	return i, nil
}

func (m *Forecast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWeather(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.City != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeather(dAtA, i, uint64(m.City.Size()))
		n7, err := m.City.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintWeather(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Sys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovWeather(uint64(l))
	}
	if m.Sunrise != 0 {
		n += 1 + sovWeather(uint64(m.Sunrise))
	}
	if m.Sunset != 0 {
		n += 1 + sovWeather(uint64(m.Sunset))
	}
	return n
}

func (m *Main) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Temperature != 0 {
		n += 9
	}
	if m.TempMin != 0 {
		n += 9
	}
	if m.TempMax != 0 {
		n += 9
	}
	if m.Pressure != 0 {
		n += 9
	}
	if m.SeaLevel != 0 {
		n += 9
	}
	if m.GroundLevel != 0 {
		n += 9
	}
	if m.Humidity != 0 {
		n += 1 + sovWeather(uint64(m.Humidity))
	}
	return n
}

func (m *Weather) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWeather(uint64(m.Id))
	}
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovWeather(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovWeather(uint64(l))
	}
	return n
}

func (m *Wind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Speed != 0 {
		n += 9
	}
	if m.Deg != 0 {
		n += 9
	}
	return n
}

func (m *Rain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreeHours != 0 {
		n += 9
	}
	return n
}

func (m *Snow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreeHours != 0 {
		n += 9
	}
	return n
}

func (m *Clouds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.All != 0 {
		n += 1 + sovWeather(uint64(m.All))
	}
	return n
}

func (m *List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dt != 0 {
		n += 1 + sovWeather(uint64(m.Dt))
	}
	if m.Main != nil {
		l = m.Main.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	if len(m.Weather) > 0 {
		for _, e := range m.Weather {
			l = e.Size()
			n += 1 + l + sovWeather(uint64(l))
		}
	}
	if m.Clouds != nil {
		l = m.Clouds.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	if m.Wind != nil {
		l = m.Wind.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	if m.Rain != nil {
		l = m.Rain.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	if m.Sys != nil {
		l = m.Sys.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	return n
}

func (m *City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWeather(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWeather(uint64(l))
	}
	if m.Coords != nil {
		l = m.Coords.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovWeather(uint64(l))
	}
	return n
}

func (m *Forecast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovWeather(uint64(l))
		}
	}
	if m.City != nil {
		l = m.City.Size()
		n += 1 + l + sovWeather(uint64(l))
	}
	return n
}

func sovWeather(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWeather(x uint64) (n int) {
	return sovWeather(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Sys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sys{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Sunrise:` + fmt.Sprintf("%v", this.Sunrise) + `,`,
		`Sunset:` + fmt.Sprintf("%v", this.Sunset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Main) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Main{`,
		`Temperature:` + fmt.Sprintf("%v", this.Temperature) + `,`,
		`TempMin:` + fmt.Sprintf("%v", this.TempMin) + `,`,
		`TempMax:` + fmt.Sprintf("%v", this.TempMax) + `,`,
		`Pressure:` + fmt.Sprintf("%v", this.Pressure) + `,`,
		`SeaLevel:` + fmt.Sprintf("%v", this.SeaLevel) + `,`,
		`GroundLevel:` + fmt.Sprintf("%v", this.GroundLevel) + `,`,
		`Humidity:` + fmt.Sprintf("%v", this.Humidity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Weather) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Weather{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Main:` + fmt.Sprintf("%v", this.Main) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Wind) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Wind{`,
		`Speed:` + fmt.Sprintf("%v", this.Speed) + `,`,
		`Deg:` + fmt.Sprintf("%v", this.Deg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rain{`,
		`ThreeHours:` + fmt.Sprintf("%v", this.ThreeHours) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Snow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Snow{`,
		`ThreeHours:` + fmt.Sprintf("%v", this.ThreeHours) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Clouds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Clouds{`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`}`,
	}, "")
	return s
}
func (this *List) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&List{`,
		`Dt:` + fmt.Sprintf("%v", this.Dt) + `,`,
		`Main:` + strings.Replace(fmt.Sprintf("%v", this.Main), "Main", "Main", 1) + `,`,
		`Weather:` + strings.Replace(fmt.Sprintf("%v", this.Weather), "Weather", "Weather", 1) + `,`,
		`Clouds:` + strings.Replace(fmt.Sprintf("%v", this.Clouds), "Clouds", "Clouds", 1) + `,`,
		`Wind:` + strings.Replace(fmt.Sprintf("%v", this.Wind), "Wind", "Wind", 1) + `,`,
		`Rain:` + strings.Replace(fmt.Sprintf("%v", this.Rain), "Rain", "Rain", 1) + `,`,
		`Sys:` + strings.Replace(fmt.Sprintf("%v", this.Sys), "Sys", "Sys", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *City) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&City{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Coords:` + strings.Replace(fmt.Sprintf("%v", this.Coords), "Coords", "routes.Coords", 1) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Forecast) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Forecast{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "List", "List", 1) + `,`,
		`City:` + strings.Replace(fmt.Sprintf("%v", this.City), "City", "City", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWeather(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Sys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunrise", wireType)
			}
			m.Sunrise = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sunrise |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunset", wireType)
			}
			m.Sunset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sunset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Main) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Main: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Main: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Temperature = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TempMin = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempMax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TempMax = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pressure", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Pressure = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeaLevel", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SeaLevel = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroundLevel", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GroundLevel = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Humidity", wireType)
			}
			m.Humidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Humidity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Weather) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Weather: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Weather: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Deg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeHours", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ThreeHours = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeHours", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ThreeHours = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clouds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clouds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clouds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			m.All = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.All |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dt", wireType)
			}
			m.Dt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Main == nil {
				m.Main = &Main{}
			}
			if err := m.Main.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weather = append(m.Weather, &Weather{})
			if err := m.Weather[len(m.Weather)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clouds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clouds == nil {
				m.Clouds = &Clouds{}
			}
			if err := m.Clouds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wind == nil {
				m.Wind = &Wind{}
			}
			if err := m.Wind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rain == nil {
				m.Rain = &Rain{}
			}
			if err := m.Rain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sys == nil {
				m.Sys = &Sys{}
			}
			if err := m.Sys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *City) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: City: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: City: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coords == nil {
				m.Coords = &routes.Coords{}
			}
			if err := m.Coords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeather
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.City == nil {
				m.City = &City{}
			}
			if err := m.City.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeather(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeather
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWeather(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWeather
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeather
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWeather
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWeather
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWeather(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWeather = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWeather   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("shared/model/weather/weather.proto", fileDescriptor_weather_d6e6e4713136b519)
}

var fileDescriptor_weather_d6e6e4713136b519 = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x8e, 0x63, 0x37, 0x97, 0xe3, 0x5f, 0xbf, 0xd0, 0xa8, 0x42, 0x69, 0x0a, 0x26, 0x78, 0x43,
	0x24, 0x24, 0x47, 0xa4, 0x48, 0xb4, 0x4b, 0xa8, 0xc4, 0x4d, 0xad, 0x80, 0xe9, 0xa2, 0x88, 0x4d,
	0xe5, 0x78, 0x46, 0xc9, 0x80, 0xed, 0x89, 0x66, 0xc6, 0xb4, 0xd9, 0xf1, 0x08, 0x3c, 0x06, 0xcf,
	0xc1, 0x8a, 0x65, 0x57, 0xa8, 0x4b, 0x9a, 0x6e, 0x58, 0xf6, 0x11, 0xd0, 0x8c, 0xc7, 0x25, 0x91,
	0xd2, 0xb2, 0xf2, 0x7c, 0xe7, 0x7c, 0xe7, 0x78, 0xbe, 0x73, 0x19, 0x08, 0xe5, 0x24, 0x16, 0x94,
	0x0c, 0x32, 0x4e, 0x68, 0x3a, 0x38, 0xa6, 0xb1, 0x9a, 0x50, 0x51, 0x7d, 0xa3, 0xa9, 0xe0, 0x8a,
	0xa3, 0xf5, 0x92, 0x13, 0x19, 0x4e, 0x64, 0x7d, 0xdd, 0xde, 0x52, 0xa4, 0xe0, 0x85, 0xa2, 0xd2,
	0x7e, 0xca, 0xb8, 0xf0, 0x1d, 0xb8, 0x07, 0x33, 0x89, 0x3a, 0xd0, 0x4c, 0x78, 0x91, 0x2b, 0x31,
	0xeb, 0x38, 0x3d, 0xa7, 0xdf, 0xc6, 0x15, 0xd4, 0x1e, 0x59, 0xe4, 0x82, 0x49, 0xda, 0xa9, 0xf7,
	0x9c, 0xbe, 0x87, 0x2b, 0x88, 0x6e, 0x43, 0x43, 0x16, 0xb9, 0xa4, 0xaa, 0xe3, 0x1a, 0x87, 0x45,
	0xe1, 0x4f, 0x07, 0xbc, 0xfd, 0x98, 0xe5, 0xa8, 0x07, 0xbe, 0xa2, 0xd9, 0x94, 0x8a, 0x58, 0x15,
	0x82, 0x9a, 0xc4, 0x0e, 0x5e, 0x34, 0xa1, 0x0d, 0x68, 0x69, 0x78, 0x94, 0xb1, 0xdc, 0x64, 0x77,
	0x70, 0x53, 0xe3, 0x7d, 0x96, 0xff, 0x75, 0xc5, 0x27, 0x26, 0x7f, 0xe5, 0x8a, 0x4f, 0x50, 0x17,
	0x5a, 0x53, 0x41, 0xa5, 0xd4, 0x49, 0x3d, 0xe3, 0xba, 0xc2, 0x68, 0x13, 0xda, 0x92, 0xc6, 0x47,
	0x29, 0xfd, 0x4c, 0xd3, 0xce, 0x5a, 0xe9, 0x94, 0x34, 0xde, 0xd3, 0x18, 0xdd, 0x87, 0xff, 0xc6,
	0x82, 0x17, 0x39, 0xb1, 0xfe, 0x46, 0x79, 0xa3, 0xd2, 0x56, 0x52, 0xba, 0xd0, 0x9a, 0x14, 0x19,
	0x23, 0x4c, 0xcd, 0x3a, 0xcd, 0x9e, 0xd3, 0x77, 0xf1, 0x15, 0x0e, 0xdf, 0x40, 0xf3, 0xb0, 0x2c,
	0x2c, 0xfa, 0x1f, 0xea, 0x8c, 0x18, 0x45, 0x2e, 0xae, 0x33, 0x82, 0x10, 0x78, 0x59, 0x6c, 0x45,
	0xb4, 0xb1, 0x39, 0x6b, 0xf9, 0x84, 0xca, 0x44, 0xb0, 0xa9, 0x62, 0x3c, 0x37, 0x22, 0xda, 0x78,
	0xd1, 0x14, 0x46, 0xe0, 0x1d, 0xb2, 0x9c, 0xa0, 0x75, 0x58, 0x93, 0x53, 0x4a, 0x89, 0x2d, 0x51,
	0x09, 0xd0, 0x2d, 0x70, 0x09, 0x1d, 0xdb, 0xba, 0xe8, 0x63, 0xf8, 0x00, 0x3c, 0xac, 0x33, 0xdf,
	0x03, 0x5f, 0x4d, 0x04, 0xa5, 0x47, 0x13, 0x5e, 0x08, 0x69, 0xa3, 0xc0, 0x98, 0x5e, 0x6a, 0x8b,
	0x26, 0x1e, 0xe4, 0xfc, 0xf8, 0xdf, 0xc4, 0x2e, 0x34, 0x76, 0x53, 0x5e, 0x10, 0xa9, 0xff, 0x16,
	0xa7, 0xa9, 0x95, 0xa4, 0x8f, 0xe1, 0xf7, 0x3a, 0x78, 0x7b, 0x4c, 0x2a, 0x2d, 0x96, 0xa8, 0x4a,
	0x2c, 0x51, 0x28, 0x5a, 0x10, 0xeb, 0x0f, 0xbb, 0xd1, 0xaa, 0xd1, 0x8b, 0xf4, 0x04, 0xd8, 0x42,
	0x3c, 0x81, 0xa6, 0xb5, 0x76, 0xdc, 0x9e, 0xdb, 0xf7, 0x87, 0x77, 0x57, 0x87, 0xd8, 0xe2, 0xe2,
	0x8a, 0x8d, 0x1e, 0x43, 0x23, 0x31, 0xb7, 0x33, 0x6d, 0xf6, 0x87, 0x77, 0x56, 0xc7, 0x95, 0x0a,
	0xb0, 0xe5, 0xea, 0xeb, 0x1d, 0xb3, 0x9c, 0x98, 0xee, 0x5f, 0x7b, 0x3d, 0x5d, 0x77, 0x6c, 0x78,
	0x9a, 0x2f, 0xb4, 0x9c, 0xc6, 0x4d, 0x7c, 0x6c, 0xe4, 0x68, 0x1e, 0x7a, 0x08, 0xae, 0x9c, 0x49,
	0x33, 0x1d, 0xfe, 0x70, 0x63, 0x35, 0xfd, 0x60, 0x26, 0xb1, 0x66, 0x85, 0x33, 0xf0, 0x76, 0x99,
	0x9a, 0xad, 0x1a, 0x98, 0x3c, 0xce, 0x68, 0x35, 0x30, 0xfa, 0x8c, 0xb6, 0xa0, 0x91, 0x70, 0x2e,
	0x88, 0x34, 0xb3, 0xe2, 0x0f, 0x37, 0x97, 0x73, 0xdb, 0xbd, 0xdd, 0x35, 0x14, 0x6c, 0xa9, 0x8b,
	0x9b, 0xeb, 0x2d, 0x6d, 0x6e, 0xf8, 0x11, 0x5a, 0xcf, 0xb9, 0xa0, 0x49, 0x2c, 0x4d, 0xcb, 0x52,
	0x26, 0x75, 0x13, 0xdd, 0xeb, 0x35, 0xea, 0x66, 0x63, 0xc3, 0xd3, 0xfc, 0x44, 0xaf, 0xc0, 0x8d,
	0x2d, 0xd6, 0xc2, 0xb0, 0xe1, 0x0d, 0xdf, 0x03, 0xd8, 0xee, 0x3d, 0x7d, 0xfb, 0x0a, 0xbd, 0x06,
	0xff, 0x05, 0x55, 0x57, 0x3f, 0xbf, 0x49, 0x47, 0x37, 0x58, 0x9d, 0xbb, 0x0a, 0x7e, 0x96, 0x9f,
	0x9e, 0x07, 0xb5, 0xb3, 0xf3, 0xa0, 0x76, 0x79, 0x1e, 0x38, 0x5f, 0xe6, 0x81, 0xf3, 0x6d, 0x1e,
	0x38, 0x3f, 0xe6, 0x81, 0x73, 0x3a, 0x0f, 0x9c, 0x5f, 0xf3, 0xc0, 0xf9, 0x3d, 0x0f, 0x6a, 0x97,
	0xf3, 0xc0, 0xf9, 0x7a, 0x11, 0xd4, 0x4e, 0x2f, 0x82, 0xda, 0xd9, 0x45, 0x50, 0xfb, 0xb0, 0x3d,
	0x66, 0x6a, 0x52, 0x8c, 0xa2, 0x84, 0x67, 0x03, 0x31, 0x61, 0x39, 0x7f, 0xb4, 0xb3, 0xb3, 0x3d,
	0x98, 0x0a, 0x3e, 0x16, 0x71, 0x96, 0xd1, 0xc1, 0x28, 0x4e, 0x3e, 0xd1, 0x9c, 0x0c, 0x52, 0x36,
	0x5a, 0x7e, 0x56, 0x47, 0x0d, 0xf3, 0x2e, 0x6e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x38,
	0x55, 0xfa, 0x75, 0x05, 0x00, 0x00,
}
